import psycopg2
import random

class generator:
    def __init__(self, database):
        surnames = ['Абрамович', 'Аверинцев', 'Авраменко', 'Адамс', 'Аккерман', 'Аксаков', 'Алейников', 'Александр Дюма', 'Алексеева', 'Алексей Митрофанов', 'Алиев', 'Амин', 'Андреев', 'Армстронг', 'Ашлаг', 'Бабкин', 'Бабушкин', 'Барнс', 'Баталов', 'Бах', 'Белинский', 'Белов', 'Бёрк', 'Берн', 'Бёрнс', 'Берроуз', 'Бехтерев', 'Блок', 'Богомолов', 'Богословский', 'Бойко', 'Борис Иоффе', 'Браун', 'Бронте', 'Булгаков', 'Бунин', 'Буш', 'Быков', 'Бэкон', 'Васильев', 'Вашингтон', 'Вебер', 'Вирт', 'Вишневский', 'Вольф', 'Ворошилов', 'Ганди', 'Гачев', 'Герберт', 'Гинзбург', 'Глазунов', 'Глинка', 'Гоголь', 'Гонкур', 'Гофман', 'Григорьев', 'Грин', 'Гроза', 'Грум-Гржимайло', 'Гумбольдт', 'Гумилёв', 'Гусев', 'Даль', 'Дарвин', 'Дворжак', 'Декурсель', 'Дефо', 'Джеймс', 'Джексон', 'Джонсон', 'Дзержинский', 'Дмитриев', 'Дункан', 'Дымарский', 'Дюма', 'Ерофеев', 'Ефремов', 'Жуандо', 'Жуковский', 'Зайцев', 'Звягинцев', 'Зубков', 'Зыкина', 'Иванов', 'Калугин', 'Капица', 'Карнеги', 'Картер', 'Кашин', 'Керри', 'Керсновский', 'Кинг', 'Клинтон', 'Кнут', 'Козлов', 'Кочетков', 'Краснов', 'Крылов', 'Крым', 'Крючков', 'Кюри', 'Лайтман', 'Лебедь', 'Леонов', 'Леонтьев', 'Либкнехт', 'Любарская', 'Любарский', 'Любимов', 'Май', 'Майков', 'Максимов', 'Маркс', 'Масляков', 'Мень', 'Минин', 'Миронов', 'Митрофанов', 'Михалков', 'Морозов', 'Мурадов', 'Найт', 'Нартов', 'Немцов', 'Новгородцев', 'Образцова', 'Олейник', 'Олейников', 'Островский', 'Павлов', 'Паркер', 'Перес', 'Песков', 'Питт', 'Попов', 'Гавриил Попов', 'Радд', 'Райкин', 'Распутин', 'Расулзаде', 'Резерфорд', 'Рубинштейн', 'Рузвельт', 'Рэй', 'Саакян', 'Савояров', 'Сергеев', 'Скотт', 'Смит', 'Смышляев', 'Собчак', 'Соловьёв', 'Стивенсон', 'Суворов', 'Сумароков', 'Сухоруков', 'Тейлор', 'Тихонов', 'Тойнби', 'Толстой', 'Трауберг', 'Турчин', 'Уилсон', 'Уильямс', 'Уоттс', 'Учитель', 'Уэллс', 'Фадеев', 'Файнс', 'Фармер', 'Фёдоров', 'Фергюсон', 'Фишер', 'Франке', 'Франко', 'Фридман', 'Фрич', 'Фудель', 'Хаббард', 'Хантер', 'Хилл', 'Четвертинский', 'Чехов', 'Чудаков', 'Чуковский', 'Шкловский', 'Шмидт', 'Шоу', 'Шпиллер', 'Шульгин', 'Шумахер', 'Эддингтон', 'Элиот']
        names = ['Аарон', 'Аббас', 'Абд аль-Узза', 'Абдуллах', 'Абид', 'Аботур', 'Аввакум', 'Август', 'Авдей', 'Авель',
                 'Авигдор', 'Авирмэд', 'Авксентий', 'Авл', 'Авнер', 'Аврелий', 'Автандил', 'Автоном', 'Агапит', 'Агафангел',
                 'Агафодор', 'Агафон', 'Аги (монгольское имя)', 'Агриппа', 'Адам (значения)', 'Адам', 'Адар', 'Адиль', 'Адольф',
                 'Адонирам', 'Адриан', 'Азамат', 'Азат', 'Азиз', 'Азим', 'Айварс', 'Айдар', 'Акакий', 'Аквилий', 'Акиф', 'Акоп',
                 'Аксель', 'Алан (западноевропейское имя)', 'Алан (осетинское имя)', 'Аланус', 'Александр', 'Алексей',
                 'Алемдар', 'Алик', 'Алим', 'Алипий', 'Алишер', 'Алоиз', 'Альберик', 'Альберт', 'Альбин', 'Альваро', 'Альвиан',
                 'Альвизе', 'Альфонс', 'Альфред', 'Амадис', 'Амвросий', 'Амедей', 'Амин', 'Амир', 'Амр', 'Анания', 'Анас',
                 'Анастасий', 'Анатолий', 'Андокид', 'Андрей', 'Андроник', 'Аннерс', 'Анри', 'Ансельм', 'Антипа', 'Антон',
                 'Антоний', 'Антонин', 'Антуан', 'Арам', 'Арефа', 'Арзуман', 'Аристарх', 'Ариф', 'Аркадий', 'Арсен', 'Арсений',
                 'Артём', 'Артемий', 'Артур', 'Арфаксад', 'Архипп', 'Атанасий', 'Аттик', 'Афанасий', 'Афинагор',
                 'Афиней (значения)', 'Африкан', 'Ахилл', 'Ахмад', 'Ахтям', 'Ашот', 'Бадр', 'Барни', 'Бартоломео', 'Басир',
                 'Бахтияр', 'Бен', 'Бехруз', 'Билял', 'Богдан', 'Болеслав', 'Болот', 'Бонавентура', 'Борис', 'Борислав', 'Боян',
                 'Бронислав', 'Брячислав', 'Булат', 'Бурхан', 'Бямбасурэн', 'Вадим', 'Валентин', 'Валерий', 'Валерьян',
                 'Вальдемар', 'Вангьял', 'Варлам', 'Варнава', 'Варфоломей', 'Василий', 'Вася', 'Вахтанг', 'Велвел', 'Венансио',
                 'Вениамин', 'Венцеслав', 'Верослав', 'Викентий', 'Виктор', 'Викторин', 'Вильгельм', 'Винцас', 'Виссарион',
                 'Виталий', 'Витаутас', 'Вито', 'Владимир', 'Владислав', 'Владлен', 'Влас', 'Волк', 'Володарь', 'Вольфганг',
                 'Вописк', 'Всеволод', 'Всеслав', 'Вук', 'Вукол', 'Вышеслав', 'Вячеслав', 'Г', 'Габриеле', 'Гавриил',
                 'Гай (римское имя)', 'Галактион', 'Гарет', 'Гаспар', 'Гафур', 'Гвидо', 'Гейдар', 'Геласий', 'Гельмут',
                 'Геннадий', 'Генри', 'Генрих', 'Георге', 'Георгий', 'Гераклид', 'Герберт', 'Герман', 'Германн', 'Геронтий',
                 'Герхард', 'Гильем', 'Гинкмар', 'Глеб', 'Гней', 'Горацио', 'Гордей', 'Гостомысл', 'Градислав', 'Григорий',
                 'Гримоальд', 'Гуго', 'Гьялцен', 'Давид']
        otch = ['Александрович', 'Алексеевич', 'Анатольевич', 'Андреевич', 'Антонович', 'Аркадьевич', 'Арсеньевич', 'Артемович',
                'Афанасьевич', 'Богданович', 'Борисович', 'Вадимович', 'Валентинович', 'Валериевич', 'Васильевич', 'Викторович',
                'Витальевич', 'Владимирович', 'Всеволодович', 'Вячеславови', 'Гаврилович', 'Геннадиевич', 'Георгиевич',
                'Глебович', 'Григорьевич', 'Давыдович', 'Данилович', 'Денисович', 'Дмитриевич', 'Евгеньевич', 'Егорович',
                'Емельянович', 'Ефимович', 'Иванович', 'Игоревич', 'Ильич', 'Иосифович', 'Кириллович', 'Константинович',
                'Корнеевич', 'Леонидович', 'Львович', 'Макарович', 'Максимович', 'Маркович', 'Матвеевич', 'Митрофанович',
                'Михайлович', 'Назарович', 'Наумович', 'Николаевич', 'Олегович', 'Павлович', 'Петрович', 'Платонович',
                'Робертович', 'Родионович', 'Романович', 'Савельевич', 'Семенович', 'Сергеевич', 'Станиславович', 'Степанович',
                'Тарасович', 'Тимофеевич', 'Тихонович', 'Федорович', 'Феликсович', 'Филиппович', 'Эдуардович', 'Юрьевич',
                'Яковлевич', 'Ярославович']
        years = [2016, 2017, 2018, 2019]
        faculty = {"Институт информационных технологий": ['Прикладная математика', 'Информатика и вычислительная техника',
                                                          'Прикладная информатика', 'Программная инженерия',
                                                          'Автоматизация технологических процессов и производств'],
                   "Институт кибернетики": ['Прикладная математика и информатика', 'Биотехнические системы и технологии',
                                            'Мехатроника и робототехника', 'Системный анализ и управление',
                                            'Управление в технических системах', 'Компьютерная безопасность',
                                            'Информационная безопасность телекоммуникационных систем'],
                   "Институт радиотехнических и телекоммуникационных систем": ['Картография и геоинформатика', 'Радиотехника',
                                                                               'Инфокоммуникационные технологии и системы связи',
                                                                               'Конструирование и технология электронных средств',
                                                                               'Радиоэлектронные системы и комплексы'],
                   "Физико-технологический институт": [
                       'Электронные и оптико-электронные приборы и системы специального назначения', 'Дизайн',
                       'Лазерная техника и лазерные технологии', 'Материаловедение и технологии материалов', 'Машиностроение',
                       'Нанотехнологии и микросистемная техника', 'Оптотехника', 'Стандартизация и метрология',
                       'Технология художественной обработки материалов', 'Электроника и наноэлектроника'],
                   "Институт комплексной безопасности и специального приборостроения": [
                       'Безопасность информационных технологий в правоохранительной сфере',
                       'Информационная безопасность автоматизированных систем',
                       'Информационно-аналитические системы безопасности', 'Правоохранительная деятельность',
                       'Правовое обеспечение национальной безопасности', 'Экономическая безопасность',
                       'Информационная безопасность', 'Информационные системы и технологии', 'Приборостроение',
                       'Фундаментальная информатика и информационные технологии'],
                   "Институт инновационных технологий и государственного управления": ['Бизнес-информатика',
                                                                                       'Государственное и муниципальное управление',
                                                                                       'Документоведение и архивоведение',
                                                                                       'Менеджмент', 'Экономика', 'Статистика'],
                   "Институт экономики и права": ['Государственное и муниципальное управление', 'Инноватика', 'Менеджмент',
                                                  'Управление качеством', 'Управление персоналом', 'Экономика', 'Юриспруденция',
                                                  'Финансы и кредит', 'Жилищное хозяйство и коммунальная инфраструктура'],
                   "Институт тонких химических технологий им. М.В. Ломоносова": ['Химия', 'Химическая технология',
                                                                                 'Биотехнология', 'Техносферная безопасность',
                                                                                 'Промышленная фармация']}
        subjects = ['Алгебра и геометрия', 'Иностранный язык', 'Информатика', 'История', 'Математический анализ',
                    'Процедурное программирование', 'Психология', 'Алгебра и геометрия', 'Анализ сложности алгоритмов',
                    'Дискретная математика', 'Иностранный язык', 'Культура речи', 'Математический анализ',
                    'Объектно-ориентированное программирование', 'Правоведение', 'ППУиН', 'Физика',
                    'Физическая культура и спорт', 'Иностранный язык', 'Математическая логика и теория алгоритмов',
                    'Математический анализ', 'Моделирование бизнес-процессов', 'Объектно-ориентированное программирование',
                    'Структуры и алгоритмы обработки данных', 'Философия', 'Архитектура вычислительных машин и систем',
                    'Иностранный язык', 'Информационные системы и технологии', 'Проектирование и разработка баз данных',
                    'Разработка программных приложений', 'Системная и программная инженерия',
                    'Структуры и алгоритмы обработки данных', 'Теория вероятности и математическая статистика', 'Экономика',
                    'Архитектура вычислительных машин и систем', 'Безопасность жизнедеятельности',
                    'Информационные системы и технологии', 'Корпоративные информационные системы', 'Основы сетевых технологий',
                    'Оценка качества информационных систем', 'Проектирование и разработка баз данных',
                    'Разработка клиент-серверных приложений', 'Системная и программная инженерия',
                    'Физическая культура и спорт', 'Гражданская оборона', 'Интеллектуальные системы и технологии',
                    'Информационная безопасность и защита информации', 'Моделирование систем',
                    'Национальная система информационной безопасности', 'Основы сетевых технологий',
                    'Проектирование информационных систем', 'Теория систем и системный анализ',
                    'Технологии визуализации информации']

    conn = psycopg2.connect(dbname='sipi_gp', user='client_gp',
                            password='client', host='192.168.0.30')

    cursor = conn.cursor()


    def gen_discipline(multiply):
        cursor.execute("delete from discipline;")
        conn.commit()
        for j in range(multiply):
            for i in range(len(subjects)):
                cursor.execute(
                    "insert into discipline (id, name, semester) values ({}, '{}',{});".format(j * len(subjects) + i + 1,
                                                                                               subjects[i],
                                                                                               random.randint(1, 8)))
        conn.commit()


    def gen_student(count, group_id, year):
        state = gen_statements(year)
        for i in range(count):
            student_id = random.randint(0, 1000000)
            cursor.execute(
                "insert into student (id, group_id, full_name, budgetary_basis) values ({}, {}, '{}',{});".format(
                    student_id, group_id, random.choice(surnames) + " " + random.choice(names) + " " + random.choice(otch),
                    random.choice(["true", "false"])))
            put_statements(state, student_id)
            conn.commit()


    def gen_statements(year):
        count = 2020 - year
        records = []
        for i in range(count * 2):
            cursor.execute("select * from discipline where semester = {};".format(i + 1))
            records.append(cursor.fetchall())
            random.shuffle(records)
        return records


    def put_statements(value, student_id):
        for i in value:
            for j in range(5):
                cursor.execute(
                    "insert into statement_exam (student_id, discipline_id, mark) values ({}, {},{});".format(student_id,
                                                                                                              i[j][0],
                                                                                                              random.choice(
                                                                                                                  ["Null",
                                                                                                                   "3", "4",
                                                                                                                   "5"])))
                cursor.execute(
                    "insert into statement_test (student_id, discipline_id, mark) values ({}, {},{});".format(student_id,
                                                                                                              i[-(j + 1)][
                                                                                                                  0],
                                                                                                              random.choice(
                                                                                                                  ["Null",
                                                                                                                   "'true'"])))


    def gen_group(count):
        cursor.execute("delete from groups;")
        cursor.execute("delete from student;")
        cursor.execute("delete from statement_exam;")
        cursor.execute("delete from statement_test;")
        conn.commit()
        for year in years:
            for i in range(count):
                fac = random.choice(list(faculty.keys()))
                spec = random.choice(faculty[fac])
                cursor.execute(
                    "insert into groups (id, faculty, specialty, receipt_year) values ({}, '{}', '{}', {});".format(
                        year * 100 + i + 1, fac, spec, year))
                gen_student(10, year * 100 + i + 1, year)
                conn.commit()


    import string


    def gen_employee(count):
        letters = string.ascii_lowercase + string.ascii_uppercase + string.digits
        for i in range(count):
            cursor.execute("insert into employee values ('{}', '{}','{}', '{}');".format(random.randint(0, 9999999),
                                                                                         ''.join(
                                                                                             random.choices(letters, k=10)),
                                                                                         random.choice(
                                                                                             surnames) + " " + random.choice(
                                                                                             names) + " " + random.choice(
                                                                                             otch),

                                                                                         "Преподаватель предмета \"" + random.choice(
                                                                                             subjects) + "\""))
            conn.commit()


gen_discipline(6)  # количество проходов по списку предметов
gen_group(30)  # количество групп в каждом учебном году
gen_employee(20)

cursor.close()
conn.close()
